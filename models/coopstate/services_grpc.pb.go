// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: services.proto

package coopstate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GameHost_FetchLevels_FullMethodName        = "/td_game.coopstate.GameHost/FetchLevels"
	GameHost_CreateLobby_FullMethodName        = "/td_game.coopstate.GameHost/CreateLobby"
	GameHost_FetchLobbies_FullMethodName       = "/td_game.coopstate.GameHost/FetchLobbies"
	GameHost_JoinLobby_FullMethodName          = "/td_game.coopstate.GameHost/JoinLobby"
	GameHost_PutTower_FullMethodName           = "/td_game.coopstate.GameHost/PutTower"
	GameHost_UpgradeTower_FullMethodName       = "/td_game.coopstate.GameHost/UpgradeTower"
	GameHost_TurnTowerOn_FullMethodName        = "/td_game.coopstate.GameHost/TurnTowerOn"
	GameHost_TurnTowerOff_FullMethodName       = "/td_game.coopstate.GameHost/TurnTowerOff"
	GameHost_ChangeTowerAimType_FullMethodName = "/td_game.coopstate.GameHost/ChangeTowerAimType"
	GameHost_SellTower_FullMethodName          = "/td_game.coopstate.GameHost/SellTower"
	GameHost_StartNewWave_FullMethodName       = "/td_game.coopstate.GameHost/StartNewWave"
	GameHost_SlowGameDown_FullMethodName       = "/td_game.coopstate.GameHost/SlowGameDown"
	GameHost_SpeedGameUp_FullMethodName        = "/td_game.coopstate.GameHost/SpeedGameUp"
	GameHost_LeaveLobby_FullMethodName         = "/td_game.coopstate.GameHost/LeaveLobby"
	GameHost_AwaitGame_FullMethodName          = "/td_game.coopstate.GameHost/AwaitGame"
	GameHost_SendGameState_FullMethodName      = "/td_game.coopstate.GameHost/SendGameState"
)

// GameHostClient is the client API for GameHost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameHostClient interface {
	FetchLevels(ctx context.Context, in *FetchLevelsRequest, opts ...grpc.CallOption) (*FetchLevelsResponse, error)
	CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*CreateLobbyResponse, error)
	FetchLobbies(ctx context.Context, in *FetchLobbiesRequest, opts ...grpc.CallOption) (*FetchLobbiesResponse, error)
	JoinLobby(ctx context.Context, in *JoinLobbyRequest, opts ...grpc.CallOption) (*JoinLobbyResponse, error)
	PutTower(ctx context.Context, in *PutTowerRequest, opts ...grpc.CallOption) (*PutTowerResponse, error)
	UpgradeTower(ctx context.Context, in *UpgradeTowerRequest, opts ...grpc.CallOption) (*UpgradeTowerResponse, error)
	TurnTowerOn(ctx context.Context, in *TurnTowerOnRequest, opts ...grpc.CallOption) (*TurnTowerOnResponse, error)
	TurnTowerOff(ctx context.Context, in *TurnTowerOffRequest, opts ...grpc.CallOption) (*TurnTowerOffResponse, error)
	ChangeTowerAimType(ctx context.Context, in *ChangeTowerAimTypeRequest, opts ...grpc.CallOption) (*ChangeTowerAimTypeResponse, error)
	SellTower(ctx context.Context, in *SellTowerRequest, opts ...grpc.CallOption) (*SellTowerResponse, error)
	StartNewWave(ctx context.Context, in *StartNewWaveRequest, opts ...grpc.CallOption) (*StartNewWaveResponse, error)
	SlowGameDown(ctx context.Context, in *SlowGameDownRequest, opts ...grpc.CallOption) (*SlowGameDownResponse, error)
	SpeedGameUp(ctx context.Context, in *SpeedGameUpRequest, opts ...grpc.CallOption) (*SpeedGameUpResponse, error)
	LeaveLobby(ctx context.Context, in *LeaveLobbyRequest, opts ...grpc.CallOption) (*LeaveLobbyResponse, error)
	AwaitGame(ctx context.Context, in *AwaitGameRequest, opts ...grpc.CallOption) (*AwaitGameResponse, error)
	SendGameState(ctx context.Context, in *SendGameStateRequest, opts ...grpc.CallOption) (GameHost_SendGameStateClient, error)
}

type gameHostClient struct {
	cc grpc.ClientConnInterface
}

func NewGameHostClient(cc grpc.ClientConnInterface) GameHostClient {
	return &gameHostClient{cc}
}

func (c *gameHostClient) FetchLevels(ctx context.Context, in *FetchLevelsRequest, opts ...grpc.CallOption) (*FetchLevelsResponse, error) {
	out := new(FetchLevelsResponse)
	err := c.cc.Invoke(ctx, GameHost_FetchLevels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameHostClient) CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*CreateLobbyResponse, error) {
	out := new(CreateLobbyResponse)
	err := c.cc.Invoke(ctx, GameHost_CreateLobby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameHostClient) FetchLobbies(ctx context.Context, in *FetchLobbiesRequest, opts ...grpc.CallOption) (*FetchLobbiesResponse, error) {
	out := new(FetchLobbiesResponse)
	err := c.cc.Invoke(ctx, GameHost_FetchLobbies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameHostClient) JoinLobby(ctx context.Context, in *JoinLobbyRequest, opts ...grpc.CallOption) (*JoinLobbyResponse, error) {
	out := new(JoinLobbyResponse)
	err := c.cc.Invoke(ctx, GameHost_JoinLobby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameHostClient) PutTower(ctx context.Context, in *PutTowerRequest, opts ...grpc.CallOption) (*PutTowerResponse, error) {
	out := new(PutTowerResponse)
	err := c.cc.Invoke(ctx, GameHost_PutTower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameHostClient) UpgradeTower(ctx context.Context, in *UpgradeTowerRequest, opts ...grpc.CallOption) (*UpgradeTowerResponse, error) {
	out := new(UpgradeTowerResponse)
	err := c.cc.Invoke(ctx, GameHost_UpgradeTower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameHostClient) TurnTowerOn(ctx context.Context, in *TurnTowerOnRequest, opts ...grpc.CallOption) (*TurnTowerOnResponse, error) {
	out := new(TurnTowerOnResponse)
	err := c.cc.Invoke(ctx, GameHost_TurnTowerOn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameHostClient) TurnTowerOff(ctx context.Context, in *TurnTowerOffRequest, opts ...grpc.CallOption) (*TurnTowerOffResponse, error) {
	out := new(TurnTowerOffResponse)
	err := c.cc.Invoke(ctx, GameHost_TurnTowerOff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameHostClient) ChangeTowerAimType(ctx context.Context, in *ChangeTowerAimTypeRequest, opts ...grpc.CallOption) (*ChangeTowerAimTypeResponse, error) {
	out := new(ChangeTowerAimTypeResponse)
	err := c.cc.Invoke(ctx, GameHost_ChangeTowerAimType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameHostClient) SellTower(ctx context.Context, in *SellTowerRequest, opts ...grpc.CallOption) (*SellTowerResponse, error) {
	out := new(SellTowerResponse)
	err := c.cc.Invoke(ctx, GameHost_SellTower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameHostClient) StartNewWave(ctx context.Context, in *StartNewWaveRequest, opts ...grpc.CallOption) (*StartNewWaveResponse, error) {
	out := new(StartNewWaveResponse)
	err := c.cc.Invoke(ctx, GameHost_StartNewWave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameHostClient) SlowGameDown(ctx context.Context, in *SlowGameDownRequest, opts ...grpc.CallOption) (*SlowGameDownResponse, error) {
	out := new(SlowGameDownResponse)
	err := c.cc.Invoke(ctx, GameHost_SlowGameDown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameHostClient) SpeedGameUp(ctx context.Context, in *SpeedGameUpRequest, opts ...grpc.CallOption) (*SpeedGameUpResponse, error) {
	out := new(SpeedGameUpResponse)
	err := c.cc.Invoke(ctx, GameHost_SpeedGameUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameHostClient) LeaveLobby(ctx context.Context, in *LeaveLobbyRequest, opts ...grpc.CallOption) (*LeaveLobbyResponse, error) {
	out := new(LeaveLobbyResponse)
	err := c.cc.Invoke(ctx, GameHost_LeaveLobby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameHostClient) AwaitGame(ctx context.Context, in *AwaitGameRequest, opts ...grpc.CallOption) (*AwaitGameResponse, error) {
	out := new(AwaitGameResponse)
	err := c.cc.Invoke(ctx, GameHost_AwaitGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameHostClient) SendGameState(ctx context.Context, in *SendGameStateRequest, opts ...grpc.CallOption) (GameHost_SendGameStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameHost_ServiceDesc.Streams[0], GameHost_SendGameState_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gameHostSendGameStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameHost_SendGameStateClient interface {
	Recv() (*SendGameStateResponse, error)
	grpc.ClientStream
}

type gameHostSendGameStateClient struct {
	grpc.ClientStream
}

func (x *gameHostSendGameStateClient) Recv() (*SendGameStateResponse, error) {
	m := new(SendGameStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameHostServer is the server API for GameHost service.
// All implementations must embed UnimplementedGameHostServer
// for forward compatibility
type GameHostServer interface {
	FetchLevels(context.Context, *FetchLevelsRequest) (*FetchLevelsResponse, error)
	CreateLobby(context.Context, *CreateLobbyRequest) (*CreateLobbyResponse, error)
	FetchLobbies(context.Context, *FetchLobbiesRequest) (*FetchLobbiesResponse, error)
	JoinLobby(context.Context, *JoinLobbyRequest) (*JoinLobbyResponse, error)
	PutTower(context.Context, *PutTowerRequest) (*PutTowerResponse, error)
	UpgradeTower(context.Context, *UpgradeTowerRequest) (*UpgradeTowerResponse, error)
	TurnTowerOn(context.Context, *TurnTowerOnRequest) (*TurnTowerOnResponse, error)
	TurnTowerOff(context.Context, *TurnTowerOffRequest) (*TurnTowerOffResponse, error)
	ChangeTowerAimType(context.Context, *ChangeTowerAimTypeRequest) (*ChangeTowerAimTypeResponse, error)
	SellTower(context.Context, *SellTowerRequest) (*SellTowerResponse, error)
	StartNewWave(context.Context, *StartNewWaveRequest) (*StartNewWaveResponse, error)
	SlowGameDown(context.Context, *SlowGameDownRequest) (*SlowGameDownResponse, error)
	SpeedGameUp(context.Context, *SpeedGameUpRequest) (*SpeedGameUpResponse, error)
	LeaveLobby(context.Context, *LeaveLobbyRequest) (*LeaveLobbyResponse, error)
	AwaitGame(context.Context, *AwaitGameRequest) (*AwaitGameResponse, error)
	SendGameState(*SendGameStateRequest, GameHost_SendGameStateServer) error
	mustEmbedUnimplementedGameHostServer()
}

// UnimplementedGameHostServer must be embedded to have forward compatible implementations.
type UnimplementedGameHostServer struct {
}

func (UnimplementedGameHostServer) FetchLevels(context.Context, *FetchLevelsRequest) (*FetchLevelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchLevels not implemented")
}
func (UnimplementedGameHostServer) CreateLobby(context.Context, *CreateLobbyRequest) (*CreateLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLobby not implemented")
}
func (UnimplementedGameHostServer) FetchLobbies(context.Context, *FetchLobbiesRequest) (*FetchLobbiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchLobbies not implemented")
}
func (UnimplementedGameHostServer) JoinLobby(context.Context, *JoinLobbyRequest) (*JoinLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinLobby not implemented")
}
func (UnimplementedGameHostServer) PutTower(context.Context, *PutTowerRequest) (*PutTowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTower not implemented")
}
func (UnimplementedGameHostServer) UpgradeTower(context.Context, *UpgradeTowerRequest) (*UpgradeTowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeTower not implemented")
}
func (UnimplementedGameHostServer) TurnTowerOn(context.Context, *TurnTowerOnRequest) (*TurnTowerOnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TurnTowerOn not implemented")
}
func (UnimplementedGameHostServer) TurnTowerOff(context.Context, *TurnTowerOffRequest) (*TurnTowerOffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TurnTowerOff not implemented")
}
func (UnimplementedGameHostServer) ChangeTowerAimType(context.Context, *ChangeTowerAimTypeRequest) (*ChangeTowerAimTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTowerAimType not implemented")
}
func (UnimplementedGameHostServer) SellTower(context.Context, *SellTowerRequest) (*SellTowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellTower not implemented")
}
func (UnimplementedGameHostServer) StartNewWave(context.Context, *StartNewWaveRequest) (*StartNewWaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNewWave not implemented")
}
func (UnimplementedGameHostServer) SlowGameDown(context.Context, *SlowGameDownRequest) (*SlowGameDownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlowGameDown not implemented")
}
func (UnimplementedGameHostServer) SpeedGameUp(context.Context, *SpeedGameUpRequest) (*SpeedGameUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpeedGameUp not implemented")
}
func (UnimplementedGameHostServer) LeaveLobby(context.Context, *LeaveLobbyRequest) (*LeaveLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveLobby not implemented")
}
func (UnimplementedGameHostServer) AwaitGame(context.Context, *AwaitGameRequest) (*AwaitGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AwaitGame not implemented")
}
func (UnimplementedGameHostServer) SendGameState(*SendGameStateRequest, GameHost_SendGameStateServer) error {
	return status.Errorf(codes.Unimplemented, "method SendGameState not implemented")
}
func (UnimplementedGameHostServer) mustEmbedUnimplementedGameHostServer() {}

// UnsafeGameHostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameHostServer will
// result in compilation errors.
type UnsafeGameHostServer interface {
	mustEmbedUnimplementedGameHostServer()
}

func RegisterGameHostServer(s grpc.ServiceRegistrar, srv GameHostServer) {
	s.RegisterService(&GameHost_ServiceDesc, srv)
}

func _GameHost_FetchLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchLevelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameHostServer).FetchLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameHost_FetchLevels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameHostServer).FetchLevels(ctx, req.(*FetchLevelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameHost_CreateLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameHostServer).CreateLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameHost_CreateLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameHostServer).CreateLobby(ctx, req.(*CreateLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameHost_FetchLobbies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchLobbiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameHostServer).FetchLobbies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameHost_FetchLobbies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameHostServer).FetchLobbies(ctx, req.(*FetchLobbiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameHost_JoinLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameHostServer).JoinLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameHost_JoinLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameHostServer).JoinLobby(ctx, req.(*JoinLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameHost_PutTower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameHostServer).PutTower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameHost_PutTower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameHostServer).PutTower(ctx, req.(*PutTowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameHost_UpgradeTower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeTowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameHostServer).UpgradeTower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameHost_UpgradeTower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameHostServer).UpgradeTower(ctx, req.(*UpgradeTowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameHost_TurnTowerOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurnTowerOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameHostServer).TurnTowerOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameHost_TurnTowerOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameHostServer).TurnTowerOn(ctx, req.(*TurnTowerOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameHost_TurnTowerOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurnTowerOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameHostServer).TurnTowerOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameHost_TurnTowerOff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameHostServer).TurnTowerOff(ctx, req.(*TurnTowerOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameHost_ChangeTowerAimType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeTowerAimTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameHostServer).ChangeTowerAimType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameHost_ChangeTowerAimType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameHostServer).ChangeTowerAimType(ctx, req.(*ChangeTowerAimTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameHost_SellTower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellTowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameHostServer).SellTower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameHost_SellTower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameHostServer).SellTower(ctx, req.(*SellTowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameHost_StartNewWave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartNewWaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameHostServer).StartNewWave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameHost_StartNewWave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameHostServer).StartNewWave(ctx, req.(*StartNewWaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameHost_SlowGameDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlowGameDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameHostServer).SlowGameDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameHost_SlowGameDown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameHostServer).SlowGameDown(ctx, req.(*SlowGameDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameHost_SpeedGameUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeedGameUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameHostServer).SpeedGameUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameHost_SpeedGameUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameHostServer).SpeedGameUp(ctx, req.(*SpeedGameUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameHost_LeaveLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameHostServer).LeaveLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameHost_LeaveLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameHostServer).LeaveLobby(ctx, req.(*LeaveLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameHost_AwaitGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AwaitGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameHostServer).AwaitGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameHost_AwaitGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameHostServer).AwaitGame(ctx, req.(*AwaitGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameHost_SendGameState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendGameStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameHostServer).SendGameState(m, &gameHostSendGameStateServer{stream})
}

type GameHost_SendGameStateServer interface {
	Send(*SendGameStateResponse) error
	grpc.ServerStream
}

type gameHostSendGameStateServer struct {
	grpc.ServerStream
}

func (x *gameHostSendGameStateServer) Send(m *SendGameStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GameHost_ServiceDesc is the grpc.ServiceDesc for GameHost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameHost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "td_game.coopstate.GameHost",
	HandlerType: (*GameHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchLevels",
			Handler:    _GameHost_FetchLevels_Handler,
		},
		{
			MethodName: "CreateLobby",
			Handler:    _GameHost_CreateLobby_Handler,
		},
		{
			MethodName: "FetchLobbies",
			Handler:    _GameHost_FetchLobbies_Handler,
		},
		{
			MethodName: "JoinLobby",
			Handler:    _GameHost_JoinLobby_Handler,
		},
		{
			MethodName: "PutTower",
			Handler:    _GameHost_PutTower_Handler,
		},
		{
			MethodName: "UpgradeTower",
			Handler:    _GameHost_UpgradeTower_Handler,
		},
		{
			MethodName: "TurnTowerOn",
			Handler:    _GameHost_TurnTowerOn_Handler,
		},
		{
			MethodName: "TurnTowerOff",
			Handler:    _GameHost_TurnTowerOff_Handler,
		},
		{
			MethodName: "ChangeTowerAimType",
			Handler:    _GameHost_ChangeTowerAimType_Handler,
		},
		{
			MethodName: "SellTower",
			Handler:    _GameHost_SellTower_Handler,
		},
		{
			MethodName: "StartNewWave",
			Handler:    _GameHost_StartNewWave_Handler,
		},
		{
			MethodName: "SlowGameDown",
			Handler:    _GameHost_SlowGameDown_Handler,
		},
		{
			MethodName: "SpeedGameUp",
			Handler:    _GameHost_SpeedGameUp_Handler,
		},
		{
			MethodName: "LeaveLobby",
			Handler:    _GameHost_LeaveLobby_Handler,
		},
		{
			MethodName: "AwaitGame",
			Handler:    _GameHost_AwaitGame_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendGameState",
			Handler:       _GameHost_SendGameState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services.proto",
}
