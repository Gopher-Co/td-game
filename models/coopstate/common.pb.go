// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.1
// source: common.proto

package coopstate

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_OK           Status = 0
	Status_ERROR        Status = 1
	Status_GAME_ENDED   Status = 2
	Status_NO_SUCH_GAME Status = 3
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "OK",
		1: "ERROR",
		2: "GAME_ENDED",
		3: "NO_SUCH_GAME",
	}
	Status_value = map[string]int32{
		"OK":           0,
		"ERROR":        1,
		"GAME_ENDED":   2,
		"NO_SUCH_GAME": 3,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type Lobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *LobbyId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Vacancy *Vacancy `protobuf:"bytes,2,opt,name=vacancy,proto3" json:"vacancy,omitempty"`
}

func (x *Lobby) Reset() {
	*x = Lobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lobby) ProtoMessage() {}

func (x *Lobby) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lobby.ProtoReflect.Descriptor instead.
func (*Lobby) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *Lobby) GetId() *LobbyId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Lobby) GetVacancy() *Vacancy {
	if x != nil {
		return x.Vacancy
	}
	return nil
}

type LobbyId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LobbyId) Reset() {
	*x = LobbyId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LobbyId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbyId) ProtoMessage() {}

func (x *LobbyId) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbyId.ProtoReflect.Descriptor instead.
func (*LobbyId) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *LobbyId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Vacancy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VacantSlots uint32 `protobuf:"varint,1,opt,name=vacant_slots,json=vacantSlots,proto3" json:"vacant_slots,omitempty"`
}

func (x *Vacancy) Reset() {
	*x = Vacancy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vacancy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vacancy) ProtoMessage() {}

func (x *Vacancy) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vacancy.ProtoReflect.Descriptor instead.
func (*Vacancy) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *Vacancy) GetVacantSlots() uint32 {
	if x != nil {
		return x.VacantSlots
	}
	return 0
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *PlayerId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address *Address  `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *Player) GetId() *PlayerId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Player) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type PlayerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *PlayerId) Reset() {
	*x = PlayerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerId) ProtoMessage() {}

func (x *PlayerId) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerId.ProtoReflect.Descriptor instead.
func (*PlayerId) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerId) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PlayerId) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type PlayersList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*PlayerId `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *PlayersList) Reset() {
	*x = PlayersList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayersList) ProtoMessage() {}

func (x *PlayersList) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayersList.ProtoReflect.Descriptor instead.
func (*PlayersList) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *PlayersList) GetPlayers() []*PlayerId {
	if x != nil {
		return x.Players
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4 uint32 `protobuf:"fixed32,1,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *Address) GetIpv4() uint32 {
	if x != nil {
		return x.Ipv4
	}
	return 0
}

func (x *Address) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type LevelId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelName string `protobuf:"bytes,1,opt,name=level_name,json=levelName,proto3" json:"level_name,omitempty"`
	MapName   string `protobuf:"bytes,2,opt,name=map_name,json=mapName,proto3" json:"map_name,omitempty"`
}

func (x *LevelId) Reset() {
	*x = LevelId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelId) ProtoMessage() {}

func (x *LevelId) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelId.ProtoReflect.Descriptor instead.
func (*LevelId) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *LevelId) GetLevelName() string {
	if x != nil {
		return x.LevelName
	}
	return ""
}

func (x *LevelId) GetMapName() string {
	if x != nil {
		return x.MapName
	}
	return ""
}

type InitialGameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players     map[string]*PlayerState `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapSettings *MapSettings            `protobuf:"bytes,2,opt,name=mapSettings,proto3" json:"mapSettings,omitempty"`
	TowersToBuy map[string]*TowerConfig `protobuf:"bytes,3,rep,name=towers_to_buy,json=towersToBuy,proto3" json:"towers_to_buy,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnemyToCall map[string]*EnemyConfig `protobuf:"bytes,4,rep,name=enemy_to_call,json=enemyToCall,proto3" json:"enemy_to_call,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GameRule    *GameRule               `protobuf:"bytes,5,opt,name=game_rule,json=gameRule,proto3" json:"game_rule,omitempty"`
	LevelName   string                  `protobuf:"bytes,6,opt,name=level_name,json=levelName,proto3" json:"level_name,omitempty"`
}

func (x *InitialGameState) Reset() {
	*x = InitialGameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialGameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialGameState) ProtoMessage() {}

func (x *InitialGameState) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialGameState.ProtoReflect.Descriptor instead.
func (*InitialGameState) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *InitialGameState) GetPlayers() map[string]*PlayerState {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *InitialGameState) GetMapSettings() *MapSettings {
	if x != nil {
		return x.MapSettings
	}
	return nil
}

func (x *InitialGameState) GetTowersToBuy() map[string]*TowerConfig {
	if x != nil {
		return x.TowersToBuy
	}
	return nil
}

func (x *InitialGameState) GetEnemyToCall() map[string]*EnemyConfig {
	if x != nil {
		return x.EnemyToCall
	}
	return nil
}

func (x *InitialGameState) GetGameRule() *GameRule {
	if x != nil {
		return x.GameRule
	}
	return nil
}

func (x *InitialGameState) GetLevelName() string {
	if x != nil {
		return x.LevelName
	}
	return ""
}

type PlayerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Health int64 `protobuf:"varint,1,opt,name=health,proto3" json:"health,omitempty"`
	Money  int64 `protobuf:"varint,2,opt,name=money,proto3" json:"money,omitempty"`
}

func (x *PlayerState) Reset() {
	*x = PlayerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerState) ProtoMessage() {}

func (x *PlayerState) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerState.ProtoReflect.Descriptor instead.
func (*PlayerState) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *PlayerState) GetHealth() int64 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *PlayerState) GetMoney() int64 {
	if x != nil {
		return x.Money
	}
	return 0
}

type MapSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       *Path  `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Background *Image `protobuf:"bytes,2,opt,name=background,proto3" json:"background,omitempty"`
}

func (x *MapSettings) Reset() {
	*x = MapSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSettings) ProtoMessage() {}

func (x *MapSettings) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSettings.ProtoReflect.Descriptor instead.
func (*MapSettings) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (x *MapSettings) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *MapSettings) GetBackground() *Image {
	if x != nil {
		return x.Background
	}
	return nil
}

type Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*Point `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *Path) Reset() {
	*x = Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

func (x *Path) GetPoints() []*Point {
	if x != nil {
		return x.Points
	}
	return nil
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageData []byte `protobuf:"bytes,1,opt,name=image_data,json=imageData,proto3" json:"image_data,omitempty"`
	Height    int32  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Width     int32  `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Frame     int64  `protobuf:"varint,4,opt,name=frame,proto3" json:"frame,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

func (x *Image) GetImageData() []byte {
	if x != nil {
		return x.ImageData
	}
	return nil
}

func (x *Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Image) GetFrame() int64 {
	if x != nil {
		return x.Frame
	}
	return 0
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

func (x *Point) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Point) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type TowerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Upgrades       []*Upgrade        `protobuf:"bytes,2,rep,name=upgrades,proto3" json:"upgrades,omitempty"`
	Price          int64             `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	TypeAttack     int32             `protobuf:"varint,4,opt,name=type_attack,json=typeAttack,proto3" json:"type_attack,omitempty"`
	Damage         int64             `protobuf:"varint,5,opt,name=damage,proto3" json:"damage,omitempty"`
	Radius         float64           `protobuf:"fixed64,6,opt,name=radius,proto3" json:"radius,omitempty"`
	SpeedAttack    int64             `protobuf:"varint,7,opt,name=speed_attack,json=speedAttack,proto3" json:"speed_attack,omitempty"`
	ProjectileVrms float64           `protobuf:"fixed64,8,opt,name=projectile_vrms,json=projectileVrms,proto3" json:"projectile_vrms,omitempty"`
	Projectile     *ProjectileConfig `protobuf:"bytes,9,opt,name=projectile,proto3" json:"projectile,omitempty"`
	OpenLevel      string            `protobuf:"bytes,10,opt,name=open_level,json=openLevel,proto3" json:"open_level,omitempty"`
	Image          *Image            `protobuf:"bytes,11,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *TowerConfig) Reset() {
	*x = TowerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerConfig) ProtoMessage() {}

func (x *TowerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerConfig.ProtoReflect.Descriptor instead.
func (*TowerConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

func (x *TowerConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TowerConfig) GetUpgrades() []*Upgrade {
	if x != nil {
		return x.Upgrades
	}
	return nil
}

func (x *TowerConfig) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TowerConfig) GetTypeAttack() int32 {
	if x != nil {
		return x.TypeAttack
	}
	return 0
}

func (x *TowerConfig) GetDamage() int64 {
	if x != nil {
		return x.Damage
	}
	return 0
}

func (x *TowerConfig) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *TowerConfig) GetSpeedAttack() int64 {
	if x != nil {
		return x.SpeedAttack
	}
	return 0
}

func (x *TowerConfig) GetProjectileVrms() float64 {
	if x != nil {
		return x.ProjectileVrms
	}
	return 0
}

func (x *TowerConfig) GetProjectile() *ProjectileConfig {
	if x != nil {
		return x.Projectile
	}
	return nil
}

func (x *TowerConfig) GetOpenLevel() string {
	if x != nil {
		return x.OpenLevel
	}
	return ""
}

func (x *TowerConfig) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

type Tower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *TowerId     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Config *TowerConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	State  *TowerState  `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Owner  *PlayerId    `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *Tower) Reset() {
	*x = Tower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tower) ProtoMessage() {}

func (x *Tower) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tower.ProtoReflect.Descriptor instead.
func (*Tower) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

func (x *Tower) GetId() *TowerId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Tower) GetConfig() *TowerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Tower) GetState() *TowerState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Tower) GetOwner() *PlayerId {
	if x != nil {
		return x.Owner
	}
	return nil
}

type TowerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TowerId) Reset() {
	*x = TowerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerId) ProtoMessage() {}

func (x *TowerId) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerId.ProtoReflect.Descriptor instead.
func (*TowerId) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

func (x *TowerId) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TowerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AimType    int32  `protobuf:"varint,1,opt,name=aim_type,json=aimType,proto3" json:"aim_type,omitempty"`
	IsTurnedOn bool   `protobuf:"varint,2,opt,name=is_turned_on,json=isTurnedOn,proto3" json:"is_turned_on,omitempty"`
	CoolDown   int64  `protobuf:"varint,3,opt,name=cool_down,json=coolDown,proto3" json:"cool_down,omitempty"`
	Position   *Point `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *TowerState) Reset() {
	*x = TowerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerState) ProtoMessage() {}

func (x *TowerState) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerState.ProtoReflect.Descriptor instead.
func (*TowerState) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

func (x *TowerState) GetAimType() int32 {
	if x != nil {
		return x.AimType
	}
	return 0
}

func (x *TowerState) GetIsTurnedOn() bool {
	if x != nil {
		return x.IsTurnedOn
	}
	return false
}

func (x *TowerState) GetCoolDown() int64 {
	if x != nil {
		return x.CoolDown
	}
	return 0
}

func (x *TowerState) GetPosition() *Point {
	if x != nil {
		return x.Position
	}
	return nil
}

type Upgrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price            int64   `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	DeltaDamage      int64   `protobuf:"varint,2,opt,name=delta_damage,json=deltaDamage,proto3" json:"delta_damage,omitempty"`
	DeltaSpeedAttack int64   `protobuf:"varint,3,opt,name=delta_speed_attack,json=deltaSpeedAttack,proto3" json:"delta_speed_attack,omitempty"`
	DeltaRadius      float64 `protobuf:"fixed64,4,opt,name=delta_radius,json=deltaRadius,proto3" json:"delta_radius,omitempty"`
	OpenLevel        string  `protobuf:"bytes,5,opt,name=open_level,json=openLevel,proto3" json:"open_level,omitempty"`
}

func (x *Upgrade) Reset() {
	*x = Upgrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Upgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Upgrade) ProtoMessage() {}

func (x *Upgrade) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Upgrade.ProtoReflect.Descriptor instead.
func (*Upgrade) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{18}
}

func (x *Upgrade) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Upgrade) GetDeltaDamage() int64 {
	if x != nil {
		return x.DeltaDamage
	}
	return 0
}

func (x *Upgrade) GetDeltaSpeedAttack() int64 {
	if x != nil {
		return x.DeltaSpeedAttack
	}
	return 0
}

func (x *Upgrade) GetDeltaRadius() float64 {
	if x != nil {
		return x.DeltaRadius
	}
	return 0
}

func (x *Upgrade) GetOpenLevel() string {
	if x != nil {
		return x.OpenLevel
	}
	return ""
}

type ProjectileConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image *Image `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *ProjectileConfig) Reset() {
	*x = ProjectileConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectileConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectileConfig) ProtoMessage() {}

func (x *ProjectileConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectileConfig.ProtoReflect.Descriptor instead.
func (*ProjectileConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{19}
}

func (x *ProjectileConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectileConfig) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

type Projectile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *ProjectileConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Pos    *Point            `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Vrms   float64           `protobuf:"fixed64,3,opt,name=vrms,proto3" json:"vrms,omitempty"`
	Vx     float64           `protobuf:"fixed64,4,opt,name=vx,proto3" json:"vx,omitempty"`
	Vy     float64           `protobuf:"fixed64,5,opt,name=vy,proto3" json:"vy,omitempty"`
	// Type is a type of the projectile.
	Type        int32    `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	Damage      int64    `protobuf:"varint,7,opt,name=damage,proto3" json:"damage,omitempty"`
	Ttl         int64    `protobuf:"varint,8,opt,name=ttl,proto3" json:"ttl,omitempty"`
	TargetEnemy *EnemyId `protobuf:"bytes,9,opt,name=target_enemy,json=targetEnemy,proto3" json:"target_enemy,omitempty"`
}

func (x *Projectile) Reset() {
	*x = Projectile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Projectile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Projectile) ProtoMessage() {}

func (x *Projectile) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Projectile.ProtoReflect.Descriptor instead.
func (*Projectile) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{20}
}

func (x *Projectile) GetConfig() *ProjectileConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Projectile) GetPos() *Point {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Projectile) GetVrms() float64 {
	if x != nil {
		return x.Vrms
	}
	return 0
}

func (x *Projectile) GetVx() float64 {
	if x != nil {
		return x.Vx
	}
	return 0
}

func (x *Projectile) GetVy() float64 {
	if x != nil {
		return x.Vy
	}
	return 0
}

func (x *Projectile) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Projectile) GetDamage() int64 {
	if x != nil {
		return x.Damage
	}
	return 0
}

func (x *Projectile) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *Projectile) GetTargetEnemy() *EnemyId {
	if x != nil {
		return x.TargetEnemy
	}
	return nil
}

type EnemyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MaxHealth  int64       `protobuf:"varint,2,opt,name=max_health,json=maxHealth,proto3" json:"max_health,omitempty"`
	Damage     int64       `protobuf:"varint,3,opt,name=damage,proto3" json:"damage,omitempty"`
	Vrms       float64     `protobuf:"fixed64,4,opt,name=vrms,proto3" json:"vrms,omitempty"`
	MoneyAward int64       `protobuf:"varint,5,opt,name=money_award,json=moneyAward,proto3" json:"money_award,omitempty"`
	Strengths  []*Strength `protobuf:"bytes,6,rep,name=strengths,proto3" json:"strengths,omitempty"`
	Weaknesses []*Weakness `protobuf:"bytes,7,rep,name=weaknesses,proto3" json:"weaknesses,omitempty"`
	Image      *Image      `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *EnemyConfig) Reset() {
	*x = EnemyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnemyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnemyConfig) ProtoMessage() {}

func (x *EnemyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnemyConfig.ProtoReflect.Descriptor instead.
func (*EnemyConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{21}
}

func (x *EnemyConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnemyConfig) GetMaxHealth() int64 {
	if x != nil {
		return x.MaxHealth
	}
	return 0
}

func (x *EnemyConfig) GetDamage() int64 {
	if x != nil {
		return x.Damage
	}
	return 0
}

func (x *EnemyConfig) GetVrms() float64 {
	if x != nil {
		return x.Vrms
	}
	return 0
}

func (x *EnemyConfig) GetMoneyAward() int64 {
	if x != nil {
		return x.MoneyAward
	}
	return 0
}

func (x *EnemyConfig) GetStrengths() []*Strength {
	if x != nil {
		return x.Strengths
	}
	return nil
}

func (x *EnemyConfig) GetWeaknesses() []*Weakness {
	if x != nil {
		return x.Weaknesses
	}
	return nil
}

func (x *EnemyConfig) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

type Enemy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config  *EnemyConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	State   *EnemyState  `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	EnemyId *EnemyId     `protobuf:"bytes,3,opt,name=enemy_id,json=enemyId,proto3" json:"enemy_id,omitempty"`
}

func (x *Enemy) Reset() {
	*x = Enemy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enemy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enemy) ProtoMessage() {}

func (x *Enemy) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enemy.ProtoReflect.Descriptor instead.
func (*Enemy) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{22}
}

func (x *Enemy) GetConfig() *EnemyConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Enemy) GetState() *EnemyState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Enemy) GetEnemyId() *EnemyId {
	if x != nil {
		return x.EnemyId
	}
	return nil
}

type EnemyId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EnemyId) Reset() {
	*x = EnemyId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnemyId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnemyId) ProtoMessage() {}

func (x *EnemyId) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnemyId.ProtoReflect.Descriptor instead.
func (*EnemyId) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{23}
}

func (x *EnemyId) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type EnemyState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CurrPoint is a current point in Path.
	CurrPoint int64 `protobuf:"varint,1,opt,name=curr_point,json=currPoint,proto3" json:"curr_point,omitempty"`
	// Pos is a current position of the enemy.
	Pos *Point `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	// Vx is a velocity on X-axis.
	Vx float64 `protobuf:"fixed64,3,opt,name=vx,proto3" json:"vx,omitempty"`
	// Vy is a velocity on Y-axis.
	Vy     float64 `protobuf:"fixed64,4,opt,name=vy,proto3" json:"vy,omitempty"`
	Health int64   `protobuf:"varint,5,opt,name=health,proto3" json:"health,omitempty"`
	// TimeNextPointLeft is a time left to the next point.
	TimeNextPointLeft int64 `protobuf:"varint,6,opt,name=time_next_point_left,json=timeNextPointLeft,proto3" json:"time_next_point_left,omitempty"`
}

func (x *EnemyState) Reset() {
	*x = EnemyState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnemyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnemyState) ProtoMessage() {}

func (x *EnemyState) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnemyState.ProtoReflect.Descriptor instead.
func (*EnemyState) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{24}
}

func (x *EnemyState) GetCurrPoint() int64 {
	if x != nil {
		return x.CurrPoint
	}
	return 0
}

func (x *EnemyState) GetPos() *Point {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *EnemyState) GetVx() float64 {
	if x != nil {
		return x.Vx
	}
	return 0
}

func (x *EnemyState) GetVy() float64 {
	if x != nil {
		return x.Vy
	}
	return 0
}

func (x *EnemyState) GetHealth() int64 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *EnemyState) GetTimeNextPointLeft() int64 {
	if x != nil {
		return x.TimeNextPointLeft
	}
	return 0
}

type Strength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeAttack int32 `protobuf:"varint,1,opt,name=type_attack,json=typeAttack,proto3" json:"type_attack,omitempty"`
	DecDmg     int64 `protobuf:"varint,2,opt,name=dec_dmg,json=decDmg,proto3" json:"dec_dmg,omitempty"`
}

func (x *Strength) Reset() {
	*x = Strength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Strength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Strength) ProtoMessage() {}

func (x *Strength) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Strength.ProtoReflect.Descriptor instead.
func (*Strength) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{25}
}

func (x *Strength) GetTypeAttack() int32 {
	if x != nil {
		return x.TypeAttack
	}
	return 0
}

func (x *Strength) GetDecDmg() int64 {
	if x != nil {
		return x.DecDmg
	}
	return 0
}

type Weakness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeAttack int32 `protobuf:"varint,1,opt,name=type_attack,json=typeAttack,proto3" json:"type_attack,omitempty"`
	IncDmg     int64 `protobuf:"varint,2,opt,name=inc_dmg,json=incDmg,proto3" json:"inc_dmg,omitempty"`
}

func (x *Weakness) Reset() {
	*x = Weakness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Weakness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Weakness) ProtoMessage() {}

func (x *Weakness) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Weakness.ProtoReflect.Descriptor instead.
func (*Weakness) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{26}
}

func (x *Weakness) GetTypeAttack() int32 {
	if x != nil {
		return x.TypeAttack
	}
	return 0
}

func (x *Weakness) GetIncDmg() int64 {
	if x != nil {
		return x.IncDmg
	}
	return 0
}

type GameRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Waves []*Wave `protobuf:"bytes,1,rep,name=waves,proto3" json:"waves,omitempty"`
}

func (x *GameRule) Reset() {
	*x = GameRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRule) ProtoMessage() {}

func (x *GameRule) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRule.ProtoReflect.Descriptor instead.
func (*GameRule) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{27}
}

func (x *GameRule) GetWaves() []*Wave {
	if x != nil {
		return x.Waves
	}
	return nil
}

type Wave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Swarms []*Swarm `protobuf:"bytes,1,rep,name=swarms,proto3" json:"swarms,omitempty"`
	Time   int64    `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Wave) Reset() {
	*x = Wave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wave) ProtoMessage() {}

func (x *Wave) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wave.ProtoReflect.Descriptor instead.
func (*Wave) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{28}
}

func (x *Wave) GetSwarms() []*Swarm {
	if x != nil {
		return x.Swarms
	}
	return nil
}

func (x *Wave) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type Swarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnemyName   string `protobuf:"bytes,1,opt,name=enemy_name,json=enemyName,proto3" json:"enemy_name,omitempty"`
	Timeout     int64  `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Interval    int64  `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
	CurrentTime int64  `protobuf:"varint,4,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"`
	CurTime     int64  `protobuf:"varint,5,opt,name=cur_time,json=curTime,proto3" json:"cur_time,omitempty"`
	MaxCalls    int64  `protobuf:"varint,6,opt,name=max_calls,json=maxCalls,proto3" json:"max_calls,omitempty"`
	CurCalls    int64  `protobuf:"varint,7,opt,name=cur_calls,json=curCalls,proto3" json:"cur_calls,omitempty"`
}

func (x *Swarm) Reset() {
	*x = Swarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Swarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swarm) ProtoMessage() {}

func (x *Swarm) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swarm.ProtoReflect.Descriptor instead.
func (*Swarm) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{29}
}

func (x *Swarm) GetEnemyName() string {
	if x != nil {
		return x.EnemyName
	}
	return ""
}

func (x *Swarm) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Swarm) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Swarm) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

func (x *Swarm) GetCurTime() int64 {
	if x != nil {
		return x.CurTime
	}
	return 0
}

func (x *Swarm) GetMaxCalls() int64 {
	if x != nil {
		return x.MaxCalls
	}
	return 0
}

func (x *Swarm) GetCurCalls() int64 {
	if x != nil {
		return x.CurCalls
	}
	return 0
}

type MapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ended         bool                    `protobuf:"varint,1,opt,name=ended,proto3" json:"ended,omitempty"`
	Win           bool                    `protobuf:"varint,2,opt,name=win,proto3" json:"win,omitempty"`
	CurrentState  int32                   `protobuf:"varint,3,opt,name=current_state,json=currentState,proto3" json:"current_state,omitempty"`
	CurrentWave   int64                   `protobuf:"varint,4,opt,name=current_wave,json=currentWave,proto3" json:"current_wave,omitempty"`
	GameRule      *GameRule               `protobuf:"bytes,5,opt,name=game_rule,json=gameRule,proto3" json:"game_rule,omitempty"`
	Time          int64                   `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
	PlayersStates map[string]*PlayerState `protobuf:"bytes,7,rep,name=players_states,json=playersStates,proto3" json:"players_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// tookTower is a tower that was taken from the right sidebar.
	TookTowerName string `protobuf:"bytes,8,opt,name=took_tower_name,json=tookTowerName,proto3" json:"took_tower_name,omitempty"`
	// chosenTower is a tower that was chosen from the map.
	ChosenTowerName string        `protobuf:"bytes,9,opt,name=chosen_tower_name,json=chosenTowerName,proto3" json:"chosen_tower_name,omitempty"`
	SpeedUp         bool          `protobuf:"varint,10,opt,name=speed_up,json=speedUp,proto3" json:"speed_up,omitempty"`
	Towers          []*Tower      `protobuf:"bytes,11,rep,name=towers,proto3" json:"towers,omitempty"`
	Enemies         []*Enemy      `protobuf:"bytes,12,rep,name=enemies,proto3" json:"enemies,omitempty"`
	Projectiles     []*Projectile `protobuf:"bytes,13,rep,name=projectiles,proto3" json:"projectiles,omitempty"`
}

func (x *MapState) Reset() {
	*x = MapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapState) ProtoMessage() {}

func (x *MapState) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapState.ProtoReflect.Descriptor instead.
func (*MapState) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{30}
}

func (x *MapState) GetEnded() bool {
	if x != nil {
		return x.Ended
	}
	return false
}

func (x *MapState) GetWin() bool {
	if x != nil {
		return x.Win
	}
	return false
}

func (x *MapState) GetCurrentState() int32 {
	if x != nil {
		return x.CurrentState
	}
	return 0
}

func (x *MapState) GetCurrentWave() int64 {
	if x != nil {
		return x.CurrentWave
	}
	return 0
}

func (x *MapState) GetGameRule() *GameRule {
	if x != nil {
		return x.GameRule
	}
	return nil
}

func (x *MapState) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MapState) GetPlayersStates() map[string]*PlayerState {
	if x != nil {
		return x.PlayersStates
	}
	return nil
}

func (x *MapState) GetTookTowerName() string {
	if x != nil {
		return x.TookTowerName
	}
	return ""
}

func (x *MapState) GetChosenTowerName() string {
	if x != nil {
		return x.ChosenTowerName
	}
	return ""
}

func (x *MapState) GetSpeedUp() bool {
	if x != nil {
		return x.SpeedUp
	}
	return false
}

func (x *MapState) GetTowers() []*Tower {
	if x != nil {
		return x.Towers
	}
	return nil
}

func (x *MapState) GetEnemies() []*Enemy {
	if x != nil {
		return x.Enemies
	}
	return nil
}

func (x *MapState) GetProjectiles() []*Projectile {
	if x != nil {
		return x.Projectiles
	}
	return nil
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x69, 0x0a, 0x05, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x76, 0x61, 0x63, 0x61, 0x6e, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x61, 0x63, 0x61,
	0x6e, 0x63, 0x79, 0x52, 0x07, 0x76, 0x61, 0x63, 0x61, 0x6e, 0x63, 0x79, 0x22, 0x1d, 0x0a, 0x07,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x07, 0x56,
	0x61, 0x63, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x63, 0x61, 0x6e, 0x74,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x61,
	0x63, 0x61, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x6b, 0x0a, 0x06, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x34, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x44, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f,
	0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x31, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x43, 0x0a, 0x07, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xc9, 0x05, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x58, 0x0a, 0x0d, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x62, 0x75, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x64, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x42, 0x75, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x42, 0x75, 0x79, 0x12, 0x58, 0x0a,
	0x0d, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63,
	0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x54,
	0x6f, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x6e, 0x65, 0x6d,
	0x79, 0x54, 0x6f, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x64, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0x5a, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x10,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x42, 0x75, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x10,
	0x45, 0x6e, 0x65, 0x6d, 0x79, 0x54, 0x6f, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x0b,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0x74, 0x0a, 0x0b, 0x4d, 0x61, 0x70,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x64, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22,
	0x38, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x05, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x23, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x22, 0xa0, 0x03, 0x0a, 0x0b, 0x54,
	0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x08, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x08, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x76,
	0x72, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6c, 0x65, 0x56, 0x72, 0x6d, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xd3, 0x01,
	0x0a, 0x05, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f,
	0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f,
	0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x64, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54,
	0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x31, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x22, 0x19, 0x0a, 0x07, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9c,
	0x01, 0x0a, 0x0a, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x61, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x54, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x6f, 0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x64, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x01,
	0x0a, 0x07, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0x56, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x64, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xa6, 0x02, 0x0a, 0x0a, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x64, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f,
	0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x72, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x76, 0x72, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x76, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x76, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x74, 0x74, 0x6c, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65,
	0x6e, 0x65, 0x6d, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x64, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45,
	0x6e, 0x65, 0x6d, 0x79, 0x49, 0x64, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e,
	0x65, 0x6d, 0x79, 0x22, 0xb5, 0x02, 0x0a, 0x0b, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x72, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x76, 0x72,
	0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x12, 0x3b,
	0x0a, 0x0a, 0x77, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f,
	0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x0a, 0x77, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x64, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x05,
	0x45, 0x6e, 0x65, 0x6d, 0x79, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74,
	0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63,
	0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x49, 0x64,
	0x52, 0x07, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x07, 0x45, 0x6e, 0x65,
	0x6d, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x0a, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x76, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x76, 0x78, 0x12, 0x0e,
	0x0a, 0x02, 0x76, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x76, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x22, 0x44, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x5f, 0x64, 0x6d, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x63, 0x44, 0x6d, 0x67, 0x22, 0x44, 0x0a,
	0x08, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e,
	0x63, 0x5f, 0x64, 0x6d, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x6e, 0x63,
	0x44, 0x6d, 0x67, 0x22, 0x39, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x2d, 0x0a, 0x05, 0x77, 0x61, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x52, 0x05, 0x77, 0x61, 0x76, 0x65, 0x73, 0x22, 0x4c,
	0x0a, 0x04, 0x57, 0x61, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x77, 0x61, 0x72, 0x6d,
	0x52, 0x06, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xd4, 0x01, 0x0a,
	0x05, 0x53, 0x77, 0x61, 0x72, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x65, 0x6d,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x75, 0x72, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x22, 0x97, 0x05, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x76, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f,
	0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x55,
	0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x6f, 0x6f, 0x6b, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x55, 0x70, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63,
	0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x06,
	0x74, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x65, 0x6e, 0x65, 0x6d, 0x69, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x65, 0x6d,
	0x79, 0x52, 0x07, 0x65, 0x6e, 0x65, 0x6d, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x60, 0x0a, 0x12, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6f,
	0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x3d, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f,
	0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x42, 0x2f, 0x5a, 0x2d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x70, 0x68, 0x65,
	0x72, 0x2d, 0x63, 0x6f, 0x2f, 0x74, 0x64, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_common_proto_goTypes = []interface{}{
	(Status)(0),              // 0: td_game.coopstate.Status
	(*Lobby)(nil),            // 1: td_game.coopstate.Lobby
	(*LobbyId)(nil),          // 2: td_game.coopstate.LobbyId
	(*Vacancy)(nil),          // 3: td_game.coopstate.Vacancy
	(*Player)(nil),           // 4: td_game.coopstate.Player
	(*PlayerId)(nil),         // 5: td_game.coopstate.PlayerId
	(*PlayersList)(nil),      // 6: td_game.coopstate.PlayersList
	(*Address)(nil),          // 7: td_game.coopstate.Address
	(*LevelId)(nil),          // 8: td_game.coopstate.LevelId
	(*InitialGameState)(nil), // 9: td_game.coopstate.InitialGameState
	(*PlayerState)(nil),      // 10: td_game.coopstate.PlayerState
	(*MapSettings)(nil),      // 11: td_game.coopstate.MapSettings
	(*Path)(nil),             // 12: td_game.coopstate.Path
	(*Image)(nil),            // 13: td_game.coopstate.Image
	(*Point)(nil),            // 14: td_game.coopstate.Point
	(*TowerConfig)(nil),      // 15: td_game.coopstate.TowerConfig
	(*Tower)(nil),            // 16: td_game.coopstate.Tower
	(*TowerId)(nil),          // 17: td_game.coopstate.TowerId
	(*TowerState)(nil),       // 18: td_game.coopstate.TowerState
	(*Upgrade)(nil),          // 19: td_game.coopstate.Upgrade
	(*ProjectileConfig)(nil), // 20: td_game.coopstate.ProjectileConfig
	(*Projectile)(nil),       // 21: td_game.coopstate.Projectile
	(*EnemyConfig)(nil),      // 22: td_game.coopstate.EnemyConfig
	(*Enemy)(nil),            // 23: td_game.coopstate.Enemy
	(*EnemyId)(nil),          // 24: td_game.coopstate.EnemyId
	(*EnemyState)(nil),       // 25: td_game.coopstate.EnemyState
	(*Strength)(nil),         // 26: td_game.coopstate.Strength
	(*Weakness)(nil),         // 27: td_game.coopstate.Weakness
	(*GameRule)(nil),         // 28: td_game.coopstate.GameRule
	(*Wave)(nil),             // 29: td_game.coopstate.Wave
	(*Swarm)(nil),            // 30: td_game.coopstate.Swarm
	(*MapState)(nil),         // 31: td_game.coopstate.MapState
	nil,                      // 32: td_game.coopstate.InitialGameState.PlayersEntry
	nil,                      // 33: td_game.coopstate.InitialGameState.TowersToBuyEntry
	nil,                      // 34: td_game.coopstate.InitialGameState.EnemyToCallEntry
	nil,                      // 35: td_game.coopstate.MapState.PlayersStatesEntry
}
var file_common_proto_depIdxs = []int32{
	2,  // 0: td_game.coopstate.Lobby.id:type_name -> td_game.coopstate.LobbyId
	3,  // 1: td_game.coopstate.Lobby.vacancy:type_name -> td_game.coopstate.Vacancy
	5,  // 2: td_game.coopstate.Player.id:type_name -> td_game.coopstate.PlayerId
	7,  // 3: td_game.coopstate.Player.address:type_name -> td_game.coopstate.Address
	5,  // 4: td_game.coopstate.PlayersList.players:type_name -> td_game.coopstate.PlayerId
	32, // 5: td_game.coopstate.InitialGameState.players:type_name -> td_game.coopstate.InitialGameState.PlayersEntry
	11, // 6: td_game.coopstate.InitialGameState.mapSettings:type_name -> td_game.coopstate.MapSettings
	33, // 7: td_game.coopstate.InitialGameState.towers_to_buy:type_name -> td_game.coopstate.InitialGameState.TowersToBuyEntry
	34, // 8: td_game.coopstate.InitialGameState.enemy_to_call:type_name -> td_game.coopstate.InitialGameState.EnemyToCallEntry
	28, // 9: td_game.coopstate.InitialGameState.game_rule:type_name -> td_game.coopstate.GameRule
	12, // 10: td_game.coopstate.MapSettings.path:type_name -> td_game.coopstate.Path
	13, // 11: td_game.coopstate.MapSettings.background:type_name -> td_game.coopstate.Image
	14, // 12: td_game.coopstate.Path.points:type_name -> td_game.coopstate.Point
	19, // 13: td_game.coopstate.TowerConfig.upgrades:type_name -> td_game.coopstate.Upgrade
	20, // 14: td_game.coopstate.TowerConfig.projectile:type_name -> td_game.coopstate.ProjectileConfig
	13, // 15: td_game.coopstate.TowerConfig.image:type_name -> td_game.coopstate.Image
	17, // 16: td_game.coopstate.Tower.id:type_name -> td_game.coopstate.TowerId
	15, // 17: td_game.coopstate.Tower.config:type_name -> td_game.coopstate.TowerConfig
	18, // 18: td_game.coopstate.Tower.state:type_name -> td_game.coopstate.TowerState
	5,  // 19: td_game.coopstate.Tower.owner:type_name -> td_game.coopstate.PlayerId
	14, // 20: td_game.coopstate.TowerState.position:type_name -> td_game.coopstate.Point
	13, // 21: td_game.coopstate.ProjectileConfig.image:type_name -> td_game.coopstate.Image
	20, // 22: td_game.coopstate.Projectile.config:type_name -> td_game.coopstate.ProjectileConfig
	14, // 23: td_game.coopstate.Projectile.pos:type_name -> td_game.coopstate.Point
	24, // 24: td_game.coopstate.Projectile.target_enemy:type_name -> td_game.coopstate.EnemyId
	26, // 25: td_game.coopstate.EnemyConfig.strengths:type_name -> td_game.coopstate.Strength
	27, // 26: td_game.coopstate.EnemyConfig.weaknesses:type_name -> td_game.coopstate.Weakness
	13, // 27: td_game.coopstate.EnemyConfig.image:type_name -> td_game.coopstate.Image
	22, // 28: td_game.coopstate.Enemy.config:type_name -> td_game.coopstate.EnemyConfig
	25, // 29: td_game.coopstate.Enemy.state:type_name -> td_game.coopstate.EnemyState
	24, // 30: td_game.coopstate.Enemy.enemy_id:type_name -> td_game.coopstate.EnemyId
	14, // 31: td_game.coopstate.EnemyState.pos:type_name -> td_game.coopstate.Point
	29, // 32: td_game.coopstate.GameRule.waves:type_name -> td_game.coopstate.Wave
	30, // 33: td_game.coopstate.Wave.swarms:type_name -> td_game.coopstate.Swarm
	28, // 34: td_game.coopstate.MapState.game_rule:type_name -> td_game.coopstate.GameRule
	35, // 35: td_game.coopstate.MapState.players_states:type_name -> td_game.coopstate.MapState.PlayersStatesEntry
	16, // 36: td_game.coopstate.MapState.towers:type_name -> td_game.coopstate.Tower
	23, // 37: td_game.coopstate.MapState.enemies:type_name -> td_game.coopstate.Enemy
	21, // 38: td_game.coopstate.MapState.projectiles:type_name -> td_game.coopstate.Projectile
	10, // 39: td_game.coopstate.InitialGameState.PlayersEntry.value:type_name -> td_game.coopstate.PlayerState
	15, // 40: td_game.coopstate.InitialGameState.TowersToBuyEntry.value:type_name -> td_game.coopstate.TowerConfig
	22, // 41: td_game.coopstate.InitialGameState.EnemyToCallEntry.value:type_name -> td_game.coopstate.EnemyConfig
	10, // 42: td_game.coopstate.MapState.PlayersStatesEntry.value:type_name -> td_game.coopstate.PlayerState
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LobbyId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vacancy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayersList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialGameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Upgrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectileConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Projectile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnemyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enemy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnemyId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnemyState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Strength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Weakness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Swarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
